/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func rotateRight(head *ListNode, k int) *ListNode {
    // 计数
    nodeIndex := head
    nodeNum := 0
    for nodeIndex != nil {
        nodeNum++
        nodeIndex = nodeIndex.Next
    }

    if nodeNum < 2 {
        return head
    }

    actualK := k % nodeNum
    flag := nodeNum - actualK

    nodeIndex = head
    for ; flag > 1; flag-- {
        nodeIndex = nodeIndex.Next
    }

    // 分成两段
    newIndex := nodeIndex.Next
    nodeIndex.Next = nil
    nodeIndex = newIndex

    for nodeIndex != nil {
        if nodeIndex.Next == nil {
            nodeIndex.Next = head
            head = newIndex
            break
        }
        nodeIndex = nodeIndex.Next
    }

    return head
}
