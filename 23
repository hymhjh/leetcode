public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length <= 1) return lists.length == 0 ? null : lists[0];
        Comparator<ListNode> comp = new Comparator<ListNode>(){
            public int compare(ListNode l1, ListNode l2){
                return l1.val - l2.val;
            }
        };
        PriorityQueue<ListNode> pq = new PriorityQueue<>(comp);
        for(ListNode l : lists){
            if(l != null) pq.offer(l);
        }
        ListNode ret = new ListNode(0); //head
        ListNode pre = ret;
        ListNode cur = ret.next;
        while(!pq.isEmpty()){
            ListNode temp = pq.poll();
            cur = new ListNode(temp.val);
            pre.next = cur;
            pre = cur;
            temp = temp.next;
            cur = cur.next;
            if(temp != null) pq.offer(temp);
        }
        return ret.next;
    }
}
