public class Solution {
    public int minPathSum(int[][] grid) {
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(i == 0 && j == 0) continue;
                else if(i == 0) grid[i][j] = grid[i][j-1] + grid[i][j];
                else if(j == 0) grid[i][j] = grid[i-1][j] + grid[i][j];
                else grid[i][j] = Math.min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}

func minPathSum(grid [][]int) int {
    if len(grid) < 1 {
        return 0
    }
    var record []int
    n, m := len(grid[0]), len(grid)
    record = append(record, grid[0][0])
    
    for i := 1; i < n; i++ {
        record = append(record, record[i-1] + grid[0][i])
    }

    for i := 1; i < m; i++ {
        for j := 0; j < n; j++ {
            if j == 0 {
                record[j] = record[j] + grid[i][j]
            } else {
                record[j] = minNum(record[j-1] + grid[i][j], record[j] + grid[i][j])
            }
        }
    }

    return record[n-1]
}

func minNum(a, b int) int {
    if a > b {
        return b
    } else {
        return a
    }
}
