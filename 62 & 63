// 62
func uniquePaths(m int, n int) int {
    var record []int
    for i := 0; i < n; i++ {
        record = append(record, 1)
    }

    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            if i == 0 {
                if j == 0 {
                    continue
                } else {
                    record[j] = record[j-1]
                }
            } else {
                if j == 0 {
                    continue
                } else {
                    record[j] = record[j-1] + record[j]
                }
            }
        }
    }

    return record[n-1]
}

// 63
func uniquePathsWithObstacles(obstacleGrid [][]int) int {
    if len(obstacleGrid) < 1 {
        return 0
    }
    var record []int
    n, m := len(obstacleGrid[0]), len(obstacleGrid)
    if obstacleGrid[0][0] == 1 {
        record = append(record, 0)
    } else {
        record = append(record, 1)
    }
    
    for i := 1; i < n; i++ {
        if obstacleGrid[0][i] == 1 {
            record = append(record, 0)
        } else {
            record = append(record, record[i-1])
        }
    }

    for i := 1; i < m; i++ {
        for j := 0; j < n; j++ {
            if j == 0 {
                if obstacleGrid[i][j] == 1 {
                    record[j] = 0
                } else {
                    continue
                } 
            } else {
                if obstacleGrid[i][j] == 1 {
                    record[j] = 0
                } else {
                    record[j] = record[j-1] + record[j]
                } 
            }
        }
    }

    return record[n-1]
}
